#!bash

# $Id$ $

# This file is part of VnMiK4, http://vnmik.sf.net/
# Author: kyanh <xkyanh@gmail.com>
# License: GPL


##############################################################################
# FILE TYPE EXTENSIONS
##############################################################################

export CAB_SUFFIX='.cab'
export RAR_SUFFIX='.r'
export TBZ_SUFFIX='.tar.bz2'
export ZZ_SUFFIX="$PKG_SUFFIX"

##############################################################################
# 7z archives
##############################################################################

# #1: package; $2: destination

ZZ_EXTRACT()
{
	stat_log "extracting package $1 using z program"
	local pkg="$1"
	local dest="$2"
	z xfvj "$pkg" -C "$dest"
}

ZZ_TEST()
{
	stat_log "testing package integrety for $1"
	z tfvj "$1" >/dev/null 2>&1
	local error=$?
	stat_log "return status: $error"
	return $error
}

ZZ_GREP()
{
	# replace all \ by /
	grep 'Extracting ' "$1" | gawk '{print $2}' | sed -e 's/\\/\//g'
}

##############################################################################
# format for vnmik-4.0.0
##############################################################################

# cannot use alias. donnot know why
#alias ZZ_TEST=Z_TEST
#alias ZZ_EXTRACT=Z_EXTRACT
#alias ZZ_GREP=Z_GREP

##############################################################################
# for cabinet files
##############################################################################

# cabinet extrating
CAB_EXTRACT()
{
	Z_EXTRACT "$1" "$2"
}

CAB_TEST()
{
	Z_TEST $* >/dev/null 2>&1
}

CAB_GREP()
{
	Z_GREP $*
}

##############################################################################
# for RAR packages
##############################################################################

RAR_EXTRACT()
{
	Z_EXTRACT "$1" "$2"
}

RAR_TEST()
{
	Z_TEST $* >/dev/null 2>&1
}

RAR_GREP()
{
	Z_GREP $*
}

##############################################################################
# for TBZ packages
##############################################################################

TBZ_EXTRACT()
{
	Z_EXTRACT "$1" "$2"
}

TBZ_TEST()
{
	Z_TEST $* >/dev/null 2>&1
}

TBZ_GREP()
{
	Z_GREP $*
}

##############################################################################
# install packages *.FOO
##############################################################################

# #1: type: CAB, RAR, TBZ, TGZ, ZZ
# #2: packages
# date: 2006 Aug 06
# update: 30 May 2008 (added ZZ)

install_package_A()
{
	stat_log "installing packages of type $1. running CORE version"
	stat_log "package to be installed: $2"
	local TYPE=$1
	local XSUFFIX=
	eval XSUFFIX=\$${TYPE}_SUFFIX # get the suffix for type. Excellent stuff :)
	stat_log "suffix for packages of this type: $XSUFFIX"
	local DEST="$PREFIX"
	stat_log "package will be installed to $DEST"

	shift # skip package TYPE

	while [ "x$1" != "x" ]; do
		local pkgfile="$1"
		stat_log "installing package $pkgfile"

		export PACKAGE=`basename "$pkgfile" $XSUFFIX`
		stat_prefix "> $PACKAGE> "

		# check whether package does exist and readable
		if [ ! -f "$pkgfile" -o ! -r "$pkgfile" ]; then
			stat_warn "unreadable: $1"
			# add this package to list of FAILED packages
			export PACKAGE_FAIL="$PACKAGE $PACKAGE_FAIL"
			shift # ok. skip to next package
			continue # skip to next package in WHILE loop
		fi

		stat_msg ''

		# check for md5sum
		if [ -f $pkgfile.md5sum -a -r $pkgfile.md5sum ]; then
			stat_log "testing package using md5sum"
			md5sum -c $pkgfile.md5sum > /dev/null 2>&1
		else
			stat_log "we donnot find any md5sum file for package. We try to use ${TYPE}_TEST"
			${TYPE}_TEST "$1"
		fi
		if [ $? -ge 1 ]; then # some errors occured
			stat_warn "package corrupted"
			export PACKAGE_FAIL="$PACKAGE $PACKAGE_FAIL"
		else # everything seems OK
			# the  log directory must be readable
			check_RWFile $LOGDIR/log.$PACKAGE
			if [ $? -gt 0 ]; then
				shift
				continue
			fi
			stat_msh "extracting..."
			${TYPE}_EXTRACT "$1" "$DEST" > $LOGDIR/log.$PACKAGE 2>/dev/null
			stat_log "package extracted; type: $TYPE; return value $?"
			# ${TYPE}_GREP $LOGDIR/tmp > $LOGDIR/log.$PACKAGE
			if [ -f $LOGDIR/z.$PACKAGE ];
			then
				stat_msg "post-install"
				source $LOGDIR/z.$PACKAGE
				${PACKAGE}_install
			else
				stat_log "post-install script not found: $LOGDIR/z.$PACKAGE"
			fi
			#stat_log "WARNING: skip fixing file modes (heavy task)"
			# fix_mode_by_log "$LOGDIR/log.$PACKAGE"
			export PACKAGE_OK="$PACKAGE $PACKAGE_OK"
		fi
		shift
	done
}

install_package() # install packages *.r
{
	local run_texhash=1
	if [ "x$1" == "x--skip-texhash" ]; then
		run_texhash=0
		shift
	fi

	stat_log "install packages; running FRONT-END version"
	if [ "x$1" == "x" ]; then
		stat_warn "($FUNCNAME) nothing to do. no package was specified"
		return 1
	fi

	check_RWVnMik # check for readable directory

	# global list of failed/ok packages
	PACKAGE_FAIL=
	PACKAGE_OK=

	# R: 7z packages
	local R_PACKAGE=
	local C_PACKAGE=
	local B_PACKAGE=
	local Z_PACKAGE=
	local PKG_EXT=

	while [ "x$1" != "x" ]; do
		PKG_EXT="${1:(-4)}"
		if [ "x$PKG_EXT" == "x.cab" ]; then
			C_PACKAGE="$C_PACKAGE $1"
		else
			PKG_EXT="${1:(-2)}"
			if [ "x$PKG_EXT" == "x.r" ]; then
				R_PACKAGE="$R_PACKAGE $1"
			elif [ "x$PKG_EXT" == "x.4" ]; then
				Z_PACKAGE="$Z_PACKAGE $1"
			else
				PKG_EXT="${1:(-8)}"
				if [ "x$PKG_EXT" == "x.tar.bz2" ]; then
					B_PACKAGE="$B_PACKAGE $1"
				else
					stat_warn "unknown package: $1"
				fi
			fi
		fi
		shift
	done

	# skip series C,R,B (vnmik 4.0.0)
	install_package_A ZZ $Z_PACKAGE

	stat_prefix ''

	# save list of installed packages to log file
	if [ -n "$PACKAGE_OK" ]; then
		stat_done "package(s) installed:"
		for pkg in $PACKAGE_OK; do
			stat_done "    $pkg"
		done
		for p in $PACKAGE_OK; do
			echo "$p" >> "$LOGDIR/log.packages"
		done
	fi

	[ -n "$PACKAGE_FAIL" ] && stat_warn "package(s) failed: $PACKAGE_FAIL"

	stat_log "skip update texdatabase in ($FUNCNAME). please check it out manually"
	# [ $run_texhash == 0 ] || ( [ -n "$PACKAGE_OK" ] && texmf_texhash )

	unset PACKAGE
	unset PACKAGE_OK
	unset PACKAGE_FAIL
}

vnmik()
{
	usage()
	{
		stat_log "($FUNCNAME) missing parameter. printing the usage page..."
		msg "example:"
		msg "\tvnmik list :\t list all package"
		msg "\tvnmik ins :\t install package"
		msg "\tvnmik get :\t download a package from VietTUG repository"
	}

	check_arg()
	{
		if [ "x$2" == "x" ]; then
			stat_log "$FUNCNAME $1 missing parameter"
			msg "missing paramater"
			usage
			return 1
		fi
	}

	stat_msg "welcome to vnmik package manager"
	stat_log "vnmik was called with option(s): $*"

	case $1 in
	"list")
		ls $PKGDIR/*$PKG_SUFFIX 2>/dev/null
		if [ $? == 0 ]; then
			stat_done "package in $PKGDIR:"
			for pkg in $PKGDIR/*$PKG_SUFFIX; do
				msg "\t" `basename $pkg $PKG_SUFFIX`
			done
		else
			msg "no package found in $PKGDIR/"
		fi
	;;
	"ins")
		check_arg $* || return 1
		local pkg_name=$2
		local pkg="$PKGDIR/$pkg_name$PKG_SUFFIX"
		[ -f $pkg ] || (stat_warn "package not found: $2") || return 2
		local do_install=0
		grep -q $pkg_name $LOGDIR/log.packages
		if [ $? -ge 1 ]; then
			do_install=1
		else
			query y "package $pkg_name already installed. Re-install"
			if [ $? == 0 ]; then
				do_install=1
			fi
		fi
		[ $do_install == 0 ] ||  install_package $pkg
	;;
	"get")
		check_arg $* || return 1
		local pkg="$2$PKG_SUFFIX"
		stat_msg "downloading $pkg from $repos"
		if [ -f $PKGDIR/$pkg ]; then
			query "y" "Package does exist. overwrite"
			[ $? == 0 ] || return 1
		fi
		wget "$VNMIK_REPO/$pkg$PKG_SUFFIX" -O $PKGDIR/$pkg
		stat_log "wget returns $?"
	;;
	*)
		usage
	;;
	esac
}

stat_log "library loaded: vnmik.package.installer"

#!bash

########################################################################
#
# $Id$
#
# VnMiK: small MiKTeX for Vietnamese
# Homepage: http://vnmik.sf.net/
#
# SETUP SCRIPT :: FUNCTIONS LIBRARY
#
# Version: 4.0.0
# Author: kyanh <xkyanh at gmail dot com>
# License: GPL
#
# HISTORY
# 3.1: 2006/07/{19,20,21,22,...}; 2006/08/{01,02,03}
# 2.1: 2006/02/07
# 1.x: 2006/02/02: 2005/01/22: 2004/12/{01,06,08}
#
########################################################################

source vnmik.configuration

trap 'cleanup' SIGTERM SIGKILL SIGINT SIGQUIT

cleanup() # cleanup vnmik installation
{
	rm -f $LOGDIR/{lock,tmp,tmpi} "$@" >/dev/null 2>&1
	stat_log
	stat_log "=== END SESSION `date` ==="
	stat_log
}

clear_log() # clear vnmik log file and start new log
{
#	( echo "[new setup, VnMiK ($VNMIKID=$VERSION)]" >> $LOGFILE ) > /dev/null 2>&1
	echo "[ creating an empty log file $LOGFILE ]" > $LOGFILE 2>&1
}

pause() # pause for 5 seconds
{
	local ztime="$1"
	[ ! -z "$ztime" ] || ztime=5
	set_color 31
	echo ">>>"
	echo ">>> press any key to continue [ timeout: $ztime seconds ]"
	read -n1 -t $ztime -s
	set_color 0
}

query() # need users' confirmation ( yes/no question )
# 1: y|n
# 2: prompt
# 3: (if not null) not of type y|n
{
	stat_log "starting query: prompt = $2, expected = $1, type = $3"
	if [ -z "$2" ]; then
		stat_warn "missing argument: (query)"
		return 2
	fi
	local EXPECT_ANS="$1"

	set_color 34
	local MYPROMPT="q$STAT_PREFIX$2? (y/n) "
	[ "x$3" == "x" ] || MYPROMPT="q$STAT_PREFIX$2"
	while : ; do
		read -p "$MYPROMPT"
		stat_log "user input: $REPLY"
		[ "x$3" == "x" ] || break
		[ "x$REPLY" == "xy" ] && break
		[ "x$REPLY" == "xn" ] && break
	done
	set_color 0
	[ "$REPLY" == "$EXPECT_ANS" ] && return 0 || return 1
}

hello() # print the hello message
{
	HELLOC=34
	set_color $HELLOC
	echo '/------------------------------------\ '
	echo -n '| '
	set_color 33 ; echo -n "VnMiK";	set_color $HELLOC
	echo " -- make TeX easier"
	echo -n '| '"Version: "
	set_color 33 ; echo -n $VERSION; set_color $HELLOC
	echo -n " with "
	set_color 33 ; echo "USB support"; set_color $HELLOC
	echo "| Based on $MIKTEX_VERSION"
	echo -n '| '"Homepage: "
	set_color 33 ; echo "http://vnmik.sf.net/"; set_color $HELLOC
	echo '\------------------------------------/ '
	echo ''
	set_color 0
	HELLOC=
	stat_date
}

install_version() # install vnmik version
{
	stat_log "installing vnmik version"
	check_RWFile $LOGDIR/VERSION
	echo "VNMIKID_A=$VNMIKID # $VERSION # `date`" > $LOGDIR/VERSION
}

texmf_texhash() # update miktex databased and make fonts maps
{
	stat_msg "updating texmf database"
	local TEXHASH=initexmf.exe
	type $TEXHASH > /dev/null 2>&1
	if [ $? -gt 0 ]; then
		stat_warn "unexcutable: $TEXHASH"
	else
		for option in "--dump --mklinks" "--mkmaps" "--update-fndb"; do		
			stat_log "running: initexmf --verbose $option"
			$TEXHASH --verbose $option	|| stat_log "return status: $?"
		done
		stat_msg "moving files to tex.bin/"
		# mv $PREFIX/tex.base/miktex/bin/* $PREFIX/tex.bin/
	fi
}

subs_file_A() # substitute with single slash
# #1: to to substitue
# #2: output; if empty written to $LOGDIR/tmp
{
	stat_log "substituting variable in files; running core (A) version"
	local VAR
	local VARI
	stat_done "($FUNCNAME) source: $1"
	stat_done "($FUNCNAME) destination: $2"
	if [ "x$1" != "x" -a -f "$1" -a -r "$1" ]; then

		# == PREFIX ==
	
		# get DOS path
		VAR=$(cygpath -d $PREFIX 2>/dev/null )
		# replace \ by \\
		VAR=$(echo "$VAR" | sed -e 's/\\/\\\\/g')
		
		# == PDF READER ==

		# get Windows Path
		check_PDFReader
		# get DOS path
		VARI=$(cygpath -d "$PDFREADER" 2>/dev/null )
		# replace \ by \\
		VARI=$(echo "$VARI" | sed -e 's/\\/\\\\/g')

		# substitue...

		sed -e "s/PREFIX/$VAR/g" \
			-e "s/PDFREADER/$VARI/g" "$1" \
			> "$2" 2>/dev/null
		return $?
	else
		stat_warn "($FUNCNAME) unreadable: $1"
		return 1
	fi
}

subs_file() # substitute with double slash ( for registry files )
# $1: source file
# $2: destination
{
	stat_log "substituting variable in files; running users' version"
	local VAR
	local VARI
	stat_done "($FUNCNAME) source: $1"
	stat_done "($FUNCNAME) desctination: $2"
	if [ "x$1" != "x" -a -f "$1" -a -r "$1" ]; then
		# == PREFIX ==
		VAR=$(cygpath -d $PREFIX 2>/dev/null )
		VAR=$(echo "$VAR" | sed -e 's/\\/\\\\\\\\/g')

		# == PDFREADER ==
		check_PDFReader
		VARI=$(cygpath -w "$PDFREADER" 2>/dev/null )
		VARI=$(echo "$VARI" | sed -e 's/\\/\\\\\\\\/g')

		# SUBSTITUTE

		sed -e "s/PREFIX/$VAR/g" \
			-e "s/PDFREADER/$VARI/g" "$1" \
			> "$2" 2>/dev/null
		return $?
	else
		return 1
	fi
}

fix_PATH() # fix the path for this script
{
#	stat_msg "fixing the PATH..."
	stat_log "fixing the PATH"
	VNMIKBIN_PATH="`type -P 0conf`"
	if [ $? -ge 1 ]; then
		stat_fail --exit "($FUNCNAME) unreadable 0conf :("
	else
		VNMIKBIN_PATH="`dirname $VNMIKBIN_PATH`"
		export VNMIKBIN_PATH="`cygpath -a $VNMIKBIN_PATH`"
		echo "$PATH" | grep -i "$VNMIKBIN_PATH" > /dev/null 2>&1
		if [ $? -ge 1 ]; then
			export PATH="$VNMIKBIN_PATH:$PATH"
		fi
	fi
}

reg_import() # import registry file ($1: unix path)
{
	stat_log "registry to be imported: $1"
	[ "x$1" == "x" ] \
		&& stat_warn "($FUNCNAME) missing arugment"
	[ -f "$1" -a -r "$1" ] \
		|| ( stat_warn "un-readable file: $1"; return 1 ) \
		|| return 1
	check_RegeditProgram || return 1
	reg.exe IMPORT "`cygpath -w \"$1\"`" >/dev/null 2>&1
	if [ $? -ge 1 ]; then
		stat_warn "($FUNCNAME) failed: $1"
	else
		stat_done "($FUNCNAME) $1"
	fi
}

reg_import_with_sub() # substitute variable and import registry file
# var: PREFIX, PDFREADER
{
	stat_log "importing registry data + substituting some variables"
	if [ "x$1" == "x" ]; then
		stat_warn "($FUNCNAME) missing argument"
		return 1
	fi
	if [ -f "$1" -a -r "$1" ]; then
		subs_file "$1" $LOGDIR/tmp \
		&& reg_import $LOGDIR/tmp
	else
		stat_fail "unreadable: $1"
	fi
}

install_shortcut() # install shortcut to desktop
# if username is encoded in UTF8, the function may be failed.
{
	# $1: shortcutname
	# $2: application path (linux format)
	mkshortcut -D -n "$1" "$2" >/dev/null 2>&1
	if [ $? -eq 1 ]; then
		stat_warn "failed install shortcut: $2"
	else
		stat_done "shortcut: $1 => $2"
	fi
}

install_winfont() # install truetype fonts.
# #1: fontfile
# #2: font name (VnMiKu, MT Extra,...)
# #3: overwrite  (--overwrite )
{
	stat_log "installing font file = $1, font name = $2"
	if [ "x$2" == "x" ]; then
		stat_warn "($FUNCNAME) missing argument"
	elif [ ! -f "$2" -o ! -r "$2" ]; then
		stat_warn "unreadable: $2"
	else
		local FONTDIR="`cygpath -Wu`/fonts"
		local FONTNAME=`basename $2`
		if [ -f "$FONTDIR/$FONTNAME" -a "x$3" != "x--overwrite" ]; then
			stat_done "already installed: $FONTNAME, $1"
		elif [ -d "$FONTDIR" ]; then
			cp -f "$2" "$FONTDIR" >/dev/null 2>&1
			if [ $? -eq 0 ]; then
				chmod 777 "$FONTDIR/`basename $2`"
			else
				stat_warn "failed copying fonts $FONTNAME, $1"
			fi
			check_PowerPrivilege
			[ $ISPOWERED -eq 1 ] \
				|| stat_warn "($FUNCNAME) require power priviledge" \
				|| return 1
			( regtool set -q -s \
					"/HKLM/software/microsoft/windows nt/currentversion/fonts/$1" \
					"$FONTNAME" >/dev/null 2>&1 ) \
				|| stat_warn "failed installfont $FONTNAME, $1"
		else
			stat_warn "unwritable-directory: $FONTDIR"
			stat_warn "you MUST install manually font: $2 ($1)"
		fi
	fi
}

install_txc_menu() # install TeXnicCenter Tools Menu
{
	# #1: name; #2: path
#	txca.exe -a "english" "$1" "`cygpath -w \"$2\"`" ' ' '%dc' > /dev/null 2>&1
#	[ $? -ge 1 ] && stat_warn "failed adding TXC menu: $2"
	stat_log "installing TeXnicCenter menu. require some magic proccess"
	stat_log "TODO: need TXC version 2007. Didnot test on newer version"
	[ "x$2" != "x" ] \
		|| (stat_log "($FUNCNAME) missing arguments"; return 1) \
		|| return 1
	check_RWFiles --prefix "$LOGDIR/" tmp tmpi \
		|| return 1
	check_RegeditProgram || return 1
	regtool -q get \
		'/HKCU/Software/ToolsCenter/TeXnicCenter/Settings/Tools' \
		>$LOGDIR/tmp 2>/dev/null
	if [ $? -ge 1 ]; then
		stat_log 'query failed: /HKCU/Software/ToolsCenter/TeXnicCenter/Settings/Tools' 
		printf "\x00\x00" > $LOGDIR/tmp
	fi
	local Xcommand
	Xcommand="`cygpath -w $2`"
	Xcommand=$(echo "$Xcommand" | sed -e 's/\\/\\\\/g' 2>/dev/null)
	0txca \
		-v "XCAPTION=$1" \
		-v "XCOMMAND=$Xcommand" \
		-v "XPARAM=$3" \
		-v "XINIDIR=$4" \
		-v "XACTION=add" \
		-v "XPRINTREG=1" \
		-v "VERBOSE=0" \
		-- $LOGDIR/tmp  \
		> $LOGDIR/tmpi 2>/dev/null
	if [ $? -ge 1 ]; then
		stat_warn "failed installing TXC menu ($1 -> $2)"
	else
		reg_import $LOGDIR/tmpi
	fi
}

get_me_run() # update database
{
	stat_msg "going to updating VnMiK system"
	export GET_ME_RUN=1
	local XFILE="$LOGDIR/log.package"
	check_RWFile $XFILE || return 1
	# sed -e 's/,/ /g' $XFILE > $YFILE
	for pkg in `xsort -u $XFILE 2>/dev/null`; do
		if [ -f "$LOGDIR/$pkg" \
			-a -r "$LOGDIR/$pkg" ];
		then
			stat_prefix "> $pkg> "
			source $LOGDIR/z.$pkg
			${pkg}_install --update
			stat_done "updated"
		fi
	done
	stat_prefix
	stat_msg "everything done"
	export GET_ME_RUN=0
	pause
}

install_PATH() # added stuff to PATH. $1 = unix path
{
	stat_log "installing PATH = $1"

	local XTMP=$LOGDIR/tmp
	local XTMPI=$LOGDIR/tmpi
	check_RWFile $XTMP || return 1

	echo "$PATH" > $XTMP
	grep -i "$1" $XTMP > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		stat_done "($FUNCNAME) exist: $1"
		return 0
	fi
	check_RWFile $XTMPI || return 1
	check_RWRegistryDatabase 'HKCU' || return 1
	regtool -q get '/HKCU/Environment/PATH' > "$XTMP" 2>/dev/null
	if [ $? -ge 1 ]; then
		regtool -q set '/HKCU/Environment/PATH' \
			"`cygpath -w $1`;%PATH%" 2>/dev/null
		if [ $? -ge 1 ]; then
			stat_warn "($FUNCNAME) failed: $1"
		else
			stat_done "($FUNCNAME) $1"
		fi
	else
		local XPATH="$(cygpath -w $1)"
		local YPATH=$(echo $XPATH | sed -e 's/\\/\\\\/g')
		grep -qi "$YPATH" "$XTMP" > /dev/null 2>&1
		if [ $? -ge 1 ]; then
			echo "`cat $XTMP`;$XPATH" > "$XTMPI"
			regtool -q set '/HKCU/Environment/PATH' \
				"`cat $XTMPI`" > /dev/null 2>&1
			if [ $? -ge 1 ]; then
				stat_warn "($FUNCNAME) failed: $1"
			else
				stat_done "($FUNCNAME) $1"
			fi
		else
			stat_done "($FUNCNAME) exist: $1"
		fi
	fi
}

uninstall_by_log() # install a package using log file
{
	stat_done 'do nothing now...'
}

# remove a section for ini file
# #1: section to remove, for example: [gsview-4.8]
# #2: ini file
# #3: output file
ini_remove_section()
{
	[ "x$VNMIKBIN_PATH" != "x" ] || fix_PATH
	[ "x$2" != "x" ] \
		|| stat_warn "($FUNCNAME) missing argument" \
		|| return 1
	0ini_rm_sec -v "XSECTION=$1" -- "$2" > "$3" 2>/dev/null
}

test_stuff() {
	printf "\x00\x00"
}

# get critical issues from log files
log_get_critical_issues()
{
	stat_log "getting critical issues from log file"
	[ -f $LOGDIR/log.all ] \
		&& (grep '1>' $LOGDIR/log.all | sort -u \
			> $LOGDIR/log.error )
	[ -f $LOGDIR/log.error ] \
		&& cat $LOGDIR/log.error
}

# use internet explorer to display readme.html
show_readme()
{
	stat_log "showing now readme.html"
	[ -d "$PREFIX/tex.doc" ] \
		|| (stat_log "unreadable: $PREFIX/tex.doc"; return 1 )\
		|| return 1
	local README=$PREFIX/tex.doc/readme.html
	local XREADME=$PREFIX/tex.doc/readme2.html
	check_RWFiles $XREAMDE \
		|| ( stat_warn "unreadable: $XREADME" ; return 1 ) \
		|| return 1
	cat $README > $XREADME
	echo "<pre>" >> $XREADME
	log_get_critical_issues >> $XREADME
	echo "</pre>" >>$XREADME
	echo "<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>" >> $XREADME
	echo "</body></html>" >> $XREADME
	type explorer.exe 2>/dev/null >/dev/null
	if [ $? -ge 1 ]; then
		stat_warn "cannot locate IExplorer on your system"
		stat_warn "please read c:/vnmik/tex.doc/readme2.html"
		pause
	else
		explorer.exe "`cygpath -w $XREADME`" &
	fi
}

fix_files_mode()
{
	stat_msg "fixing files' mode. please wait"
	chmod 777 -R "$PREFIX/vnmik/"
}

fix_mode_by_log()
# $1: log file
{
	stat_log "fixing files mode, using log file $1"
	stat_msh "fixing files mode..."
	[ -r "$1" ] \
		|| (stat_log "unreadable: $1" ; return 1) \
		|| return 1
	echo -en "0$STAT_PREFIX"
	if [ "x`basename $1`" == "xtexmf_root" ]; then
		echo 'please relax and wait...'
		chmod 777 -R "$PREFIX/texmf/"
		stat_msh 'everything done'
	else
		for f in `cat $1`; do
			echo -en '.'
			[ -f "$PREFIX/$f" ] && chmod 777 "$PREFIX/$f" > /dev/null 2>&1
		done
		echo
	fi
}

path_to_win()
{
	echo "`cygpath -w \"$1\"`"
}

stat_log "library loaded: vnmik.functions"
